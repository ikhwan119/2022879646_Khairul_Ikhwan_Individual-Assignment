#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <signal.h>

#define MAX_CHILDREN 5
#define MAX_MESSAGE_LENGTH 256

// Global variables
int num_children = 0;
int child_pids[MAX_CHILDREN];

// Signal handler function for interrupt (Ctrl+C)
void interrupt_handler(int sig) {
    printf("\nInterrupt detected. Exiting...\n");
    for (int i = 0; i < num_children; i++) {
        kill(child_pids[i], SIGTERM); // Send termination signal to children
    }
    exit(0);
}

int main() {
    int fd[2];
    if (pipe(fd) == -1) {
        perror("Pipe creation failed");
        exit(1);
    }

    signal(SIGINT, interrupt_handler); // Register signal handler for interrupt (Ctrl+C)

    while (1) {
        char message[MAX_MESSAGE_LENGTH];
        printf("Enter a message for child process (or type 'exit' to quit): ");
        fgets(message, MAX_MESSAGE_LENGTH, stdin);

        if (strcmp(message, "exit\n") == 0) {
            printf("Exiting...\n");
            break;
        }

        pid_t pid = fork();
        if (pid == -1) {
            perror("Fork failed");
            exit(1);
        } else if (pid == 0) {
            // Child process
            close(fd[1]); // Close write end of the pipe
            char message_received[MAX_MESSAGE_LENGTH];
            read(fd[0], message_received, sizeof(message_received));
            printf("Child process (PID: %d) received message: %s", getpid(), message_received);
            close(fd[0]); // Close read end of the pipe
            exit(0);
        } else {
            // Parent process
            close(fd[0]); // Close read end of the pipe
            write(fd[1], message, strlen(message) + 1);
            close(fd[1]); // Close write end of the pipe
            child_pids[num_children++] = pid;
        }
    }

    return 0;
}
